#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

#include <behaviors/rgbled_widget.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Layer Numbering

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

&mmv {
    delay-ms = <20>;
    trigger-period-ms = <3>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <2>;
};

&msc {
    delay-ms = <3>;
    trigger-period-ms = <100>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <0>;
};

&lt {
    hold-while-undecided;
    hold-while-undecided-linger;
    quick-tap-ms = <150>;
    flavor = "hold-preferred";
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        scroll {
            bindings = <&mo 5>;
            key-positions = <22 21>;
            layers = <4>;
        };
    };

    behaviors {
        sensor_rotate_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_wheel_scroll: mouse_wheel_scroll {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };

        lang_behavior: lang_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&lt 1 LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        mouse_hold_scroll_behavior: mouse_hold_scroll_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_HOLD_SCROLL_BEHAVIOR";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };

        back_default_layer_behavior: back_default_layer_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "BACK_DEFAULT_LAYER_BEHAVIOR";
            bindings = <&mo>, <&mo>;

            #binding-cells = <2>;
            tapping-term-ms = <50>;
            hold-while-undecided;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&kp ESC           &kp Q           &kp W             &kp E         &kp R                    &kp T                                         &kp Y            &kp U  &kp I      &kp O    &kp P          &kp MINUS
&mt LCTRL TAB     &kp A           &kp S             &kp D         &kp F                    &kp G           &trans     &mo 3              &kp H            &kp J  &kp K      &kp L    &kp SEMI       &kp SQT
&kp LEFT_SHIFT    &mt LEFT_ALT Z  &kp X             &kp C         &kp V                    &kp B           &mo 4      &mt RIGHT_SHIFT N  &kp N            &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp EQUAL
&kp LEFT_CONTROL  &mo 2           &kp LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_GUI LANGUAGE_1  &lang_behavior  &kp SPACE  &kp ENTER          &lt 2 BACKSPACE                             &kp BACKSLASH  &trans
            >;

            sensor-bindings = <&sensor_rotate_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
&kp TILDE  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT     &trans  &trans  &kp CARET     &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR      &kp PIPE
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &trans  &trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp BACKSLASH
&trans     &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans                                                  &trans        &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&trans      &trans            &trans      &kp K_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP                       &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LG(LA(I))  &kp LG(R)  &kp LBRC          &kp RBRC
&trans      &trans            &trans      &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRI_UP          &trans  &trans  &kp LEFT_ARROW        &kp DOWN_ARROW         &kp UP_ARROW   &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp LG(F5)  &kp LG(LS(NUMBER_5))  &kp LG(LS(NUMBER_4))  &trans  &trans  &kp AMPS              &kp PIPE               &kp PLUS       &kp MINUS  &kp LPAR          &kp RPAR
&trans      &trans            &trans      &trans      &trans                &trans                &trans  &trans  &trans                                                                 &trans            &trans
            >;

            sensor-bindings = <&sensor_rotate_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        function_layer {
            label = "FUN";
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_DISC 0  &bt BT_DISC 1   &bt BT_DISC 2  &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans          &trans         &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR     &bt BT_CLR_ALL  &trans         &trans        &trans        &trans  &trans  &trans  &trans                          &trans  &trans
            >;

            sensor-bindings = <&sensor_rotate_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp ESC           &kp Q           &kp W             &kp E         &kp R                    &kp T                                         &kp Y                             &kp U      &mkp MCLK  &kp O      &kp P          &mkp MCLK
&mt LCTRL TAB     &kp A           &kp S             &kp D         &kp F                    &kp G           &trans     &mo 3              &kp H                             &mkp LCLK  &mo 5      &mkp RCLK  &mkp LCLK      &mouse_hold_scroll_behavior 5 RCLK
&kp LEFT_SHIFT    &mt LEFT_ALT Z  &kp X             &kp C         &kp V                    &kp B           &trans     &mt RIGHT_SHIFT N  &kp N                             &kp M      &kp COMMA  &kp DOT    &kp FSLH       &kp EQUAL
&kp LEFT_CONTROL  &mo 2           &kp LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_GUI LANGUAGE_1  &lang_behavior  &kp SPACE  &kp ENTER          &back_default_layer_behavior 2 0                                   &kp BACKSLASH  &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F11  &kp F12  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                            &trans   &trans
            >;
        };

        hold_mouse_layer {
            label = "HOLD_MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };
    };
};
